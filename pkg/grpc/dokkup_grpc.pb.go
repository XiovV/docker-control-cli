// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: pkg/grpc/dokkup.proto

package dokkup

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DokkupClient is the client API for Dokkup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DokkupClient interface {
	DeployJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (Dokkup_DeployJobClient, error)
	StopJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (Dokkup_StopJobClient, error)
	RollbackJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (Dokkup_RollbackJobClient, error)
	GetNodeStatus(ctx context.Context, in *GetNodeStatusRequest, opts ...grpc.CallOption) (*NodeStatus, error)
	GetJobStatus(ctx context.Context, in *Job, opts ...grpc.CallOption) (*JobStatus, error)
}

type dokkupClient struct {
	cc grpc.ClientConnInterface
}

func NewDokkupClient(cc grpc.ClientConnInterface) DokkupClient {
	return &dokkupClient{cc}
}

func (c *dokkupClient) DeployJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (Dokkup_DeployJobClient, error) {
	stream, err := c.cc.NewStream(ctx, &Dokkup_ServiceDesc.Streams[0], "/Dokkup/DeployJob", opts...)
	if err != nil {
		return nil, err
	}
	x := &dokkupDeployJobClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dokkup_DeployJobClient interface {
	Recv() (*DeployJobResponse, error)
	grpc.ClientStream
}

type dokkupDeployJobClient struct {
	grpc.ClientStream
}

func (x *dokkupDeployJobClient) Recv() (*DeployJobResponse, error) {
	m := new(DeployJobResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dokkupClient) StopJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (Dokkup_StopJobClient, error) {
	stream, err := c.cc.NewStream(ctx, &Dokkup_ServiceDesc.Streams[1], "/Dokkup/StopJob", opts...)
	if err != nil {
		return nil, err
	}
	x := &dokkupStopJobClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dokkup_StopJobClient interface {
	Recv() (*StopJobResponse, error)
	grpc.ClientStream
}

type dokkupStopJobClient struct {
	grpc.ClientStream
}

func (x *dokkupStopJobClient) Recv() (*StopJobResponse, error) {
	m := new(StopJobResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dokkupClient) RollbackJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (Dokkup_RollbackJobClient, error) {
	stream, err := c.cc.NewStream(ctx, &Dokkup_ServiceDesc.Streams[2], "/Dokkup/RollbackJob", opts...)
	if err != nil {
		return nil, err
	}
	x := &dokkupRollbackJobClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dokkup_RollbackJobClient interface {
	Recv() (*RollbackJobResponse, error)
	grpc.ClientStream
}

type dokkupRollbackJobClient struct {
	grpc.ClientStream
}

func (x *dokkupRollbackJobClient) Recv() (*RollbackJobResponse, error) {
	m := new(RollbackJobResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dokkupClient) GetNodeStatus(ctx context.Context, in *GetNodeStatusRequest, opts ...grpc.CallOption) (*NodeStatus, error) {
	out := new(NodeStatus)
	err := c.cc.Invoke(ctx, "/Dokkup/GetNodeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dokkupClient) GetJobStatus(ctx context.Context, in *Job, opts ...grpc.CallOption) (*JobStatus, error) {
	out := new(JobStatus)
	err := c.cc.Invoke(ctx, "/Dokkup/GetJobStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DokkupServer is the server API for Dokkup service.
// All implementations must embed UnimplementedDokkupServer
// for forward compatibility
type DokkupServer interface {
	DeployJob(*Job, Dokkup_DeployJobServer) error
	StopJob(*Job, Dokkup_StopJobServer) error
	RollbackJob(*Job, Dokkup_RollbackJobServer) error
	GetNodeStatus(context.Context, *GetNodeStatusRequest) (*NodeStatus, error)
	GetJobStatus(context.Context, *Job) (*JobStatus, error)
	mustEmbedUnimplementedDokkupServer()
}

// UnimplementedDokkupServer must be embedded to have forward compatible implementations.
type UnimplementedDokkupServer struct {
}

func (UnimplementedDokkupServer) DeployJob(*Job, Dokkup_DeployJobServer) error {
	return status.Errorf(codes.Unimplemented, "method DeployJob not implemented")
}
func (UnimplementedDokkupServer) StopJob(*Job, Dokkup_StopJobServer) error {
	return status.Errorf(codes.Unimplemented, "method StopJob not implemented")
}
func (UnimplementedDokkupServer) RollbackJob(*Job, Dokkup_RollbackJobServer) error {
	return status.Errorf(codes.Unimplemented, "method RollbackJob not implemented")
}
func (UnimplementedDokkupServer) GetNodeStatus(context.Context, *GetNodeStatusRequest) (*NodeStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeStatus not implemented")
}
func (UnimplementedDokkupServer) GetJobStatus(context.Context, *Job) (*JobStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobStatus not implemented")
}
func (UnimplementedDokkupServer) mustEmbedUnimplementedDokkupServer() {}

// UnsafeDokkupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DokkupServer will
// result in compilation errors.
type UnsafeDokkupServer interface {
	mustEmbedUnimplementedDokkupServer()
}

func RegisterDokkupServer(s grpc.ServiceRegistrar, srv DokkupServer) {
	s.RegisterService(&Dokkup_ServiceDesc, srv)
}

func _Dokkup_DeployJob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Job)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DokkupServer).DeployJob(m, &dokkupDeployJobServer{stream})
}

type Dokkup_DeployJobServer interface {
	Send(*DeployJobResponse) error
	grpc.ServerStream
}

type dokkupDeployJobServer struct {
	grpc.ServerStream
}

func (x *dokkupDeployJobServer) Send(m *DeployJobResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Dokkup_StopJob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Job)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DokkupServer).StopJob(m, &dokkupStopJobServer{stream})
}

type Dokkup_StopJobServer interface {
	Send(*StopJobResponse) error
	grpc.ServerStream
}

type dokkupStopJobServer struct {
	grpc.ServerStream
}

func (x *dokkupStopJobServer) Send(m *StopJobResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Dokkup_RollbackJob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Job)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DokkupServer).RollbackJob(m, &dokkupRollbackJobServer{stream})
}

type Dokkup_RollbackJobServer interface {
	Send(*RollbackJobResponse) error
	grpc.ServerStream
}

type dokkupRollbackJobServer struct {
	grpc.ServerStream
}

func (x *dokkupRollbackJobServer) Send(m *RollbackJobResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Dokkup_GetNodeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DokkupServer).GetNodeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dokkup/GetNodeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DokkupServer).GetNodeStatus(ctx, req.(*GetNodeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dokkup_GetJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DokkupServer).GetJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dokkup/GetJobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DokkupServer).GetJobStatus(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

// Dokkup_ServiceDesc is the grpc.ServiceDesc for Dokkup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dokkup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Dokkup",
	HandlerType: (*DokkupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeStatus",
			Handler:    _Dokkup_GetNodeStatus_Handler,
		},
		{
			MethodName: "GetJobStatus",
			Handler:    _Dokkup_GetJobStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DeployJob",
			Handler:       _Dokkup_DeployJob_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StopJob",
			Handler:       _Dokkup_StopJob_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RollbackJob",
			Handler:       _Dokkup_RollbackJob_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/grpc/dokkup.proto",
}
