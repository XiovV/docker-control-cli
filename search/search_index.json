{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":""},{"location":"#what-is-dokkup","title":"What is dokkup?","text":"<p>dokkup is a container orchestrator designed to make managing containers across a cluster of servers as simple as possible.</p> <p>It's ideal for use cases where you want to orchestrate containers accross one or multiple servers. Think of it as Nomad, Swarm or Kubernetes.</p>"},{"location":"#how-does-it-work","title":"How does it work?","text":"<p>dokkup consists of two parts, the agent and the CLI tool:</p> <ul> <li>agent runs on the servers/nodes where you want to run your containers. It listens for incoming job requests and executes them.</li> <li>CLI is used to dispatch job requests to the servers/nodes.</li> </ul> <p>The CLI requires two files, the inventory and the job files:</p> <ul> <li>inventory contains information about your nodes, such as their agent's API key, URL and name.</li> <li>job contains the configuration for the containers you want to deploy, it closely resembles a standard docker-compose file.</li> </ul>"},{"location":"#where-do-i-start","title":"Where do I start?","text":"<p>You can start by reading Agent setup and CLI setup then reading through the Deploying jobs section.</p>"},{"location":"agent-setup/","title":"Agent setup","text":"<p>The agent runs on your server and will do all of the container management once it receives a request from the CLI tool.</p>"},{"location":"agent-setup/#deploy-the-agent","title":"Deploy the agent","text":"<p>Running the agent is as simple as running a simple docker command:</p> <pre><code>$ docker run -d --name dokkup-agent -p 8080:8080 \\ \n--restart always -v /path/to/config:/config \\ \n-v /var/run/docker.sock:/var/run/docker.sock xiovv/dokkup:latest\n</code></pre>"},{"location":"agent-setup/#retrieve-the-api-key","title":"Retrieve the API key","text":"<p>You can retrieve the API key through the logs. Please note that the API key will not be printed out the next time you run the agent.</p> <pre><code>$ docker logs dokkup-agent\n\nYour new API key is: jy9DbtDlfi5VJuAkbZYd4Kt0c2cQY8iQ\n2023-09-22T10:31:42.175+0200    INFO    agent/main.go:36        server is listening...  {\"port\": \"8080\"}\n</code></pre> <p>The agent is now ready to be used.</p>"},{"location":"cli-setup/","title":"CLI Setup","text":"<p>The CLI is used to execute jobs and to tell the agent what to do.</p>"},{"location":"cli-setup/#install","title":"Install","text":""},{"location":"cli-setup/#install-from-releases","title":"Install from Releases","text":"<p>Go to Releases and download the binary for your OS and CPU architecture.</p>"},{"location":"cli-setup/#install-from-source","title":"Install from source:","text":"<p>Clone the repository: <pre><code>$ git clone https://github.com/XiovV/dokkup.git\n</code></pre></p> <p>Install the binary: <pre><code>cd dokkup/cmd/dokkup\ngo install\n</code></pre></p> <p>Run <code>dokkup</code> in your terminal to verify it's installed: <pre><code>$ dokkup version\n\nDokkup v0.1.0-beta, build fd13a57\n</code></pre></p>"},{"location":"deploying_jobs/deploy-job/","title":"Deploy a job","text":"<p>Write complete guide on how to deploy a job, including the inventory and job spec files.</p>"},{"location":"deploying_jobs/inventory/","title":"Inventory","text":"<p>The inventory contains information about our agents. The concept is very similar to Ansible's inventory file.</p> inventory.yaml<pre><code>nodes:\n - name: \"lab1\"\n   location: \"192.168.0.99:8080\"\n   key: \"Z6wC4goD7V2EiL4XuecTuo8jVxfvwVxs\"\n\n - name: \"lab2\"\n   location: \"192.168.0.100:8080\"\n   key: \"EcwxaMO3kyBaKETesxInx7ga3Ti93gvI\"\n\ngroups:\n - name: \"labs\"\n   nodes: [\"lab1\", \"lab2\"]\n</code></pre>"},{"location":"deploying_jobs/inventory/#nodes","title":"Nodes","text":"<p>The nodes field is an array of nodes (or servers, both terms are used interchangeably) where the agents are running. It consists of the following items:</p> <ul> <li>name is the custom name you want to give to a node.</li> <li>location is the URL where the agent is running.</li> <li>key is the Agent's API key.</li> </ul>"},{"location":"deploying_jobs/inventory/#groups","title":"Groups","text":"<p>The groups field is an array of groups, where you can group together multiple nodes to avoid referring to them individually. It consists of the following items:</p> <ul> <li>name is the custom name you want to give to a group.</li> <li>nodes is a list of nodes you want to add to a group.</li> </ul>"},{"location":"deploying_jobs/job/","title":"Job","text":"<p>The job specification contains the configuration for the containers you want to deploy.</p> job.yaml<pre><code># The group where you want to deploy the job.\n#\n# Cannot be used if node OR nodes have been specified.\ngroup: \"labs\"\n\n# The node on which you want to deploy the job.\n#\n# Cannot be used if group OR nodes have been specified.\n# node: \"lab1\"\n\n# List of nodes on which you want to deploy the job.\n#\n# Cannot be used if group OR node have been specified.\n# nodes: [\"lab1\", \"lab2\"]\n\n# How many containers you want to run per node.\ncount: 2\n\n# Name of the job.\nname: \"demo\"\n\ncontainer:\n   # Docker image\n - image: \"traefik/whoami:latest\"\n\n   # Array of ports\n   ports:\n      # Port inside the container\n    - in: 8000\n      # Exposed port\n      #\n      # If omitted docker will dynamically assign the exposed port.\n      # Recommended to omit if running more than one instance of a container (e.g. count is greater than 1)\n    - out: 8080\n\n   # Restart policy\n   restart: always \n\n   # Array of labels\n   labels:\n     - \"my.label.test=demo\"\n\n   # Array of environment variables\n   environment:\n     - MYENV=ENVEXAMPLE\n\n   # Array of volumes\n   volumes:\n     - myvolume:/home\n\n   # Array of networks\n   #\n   # Default: bridge\n   networks:\n    - mynetwork\n\n   # Array of command flags\n   commands:\n    - \"--my-custom-flag\"\n</code></pre>"}]}