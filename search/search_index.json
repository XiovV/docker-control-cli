{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":""},{"location":"#what-is-dokkup","title":"What is dokkup?","text":"<p>dokkup is a container orchestrator designed to make managing containers across a cluster of servers as simple as possible.</p> <p>It's ideal for use cases where you want to orchestrate containers accross one or multiple servers. Think of it as Nomad, Swarm or Kubernetes.</p>"},{"location":"#how-does-it-work","title":"How does it work?","text":"<p>dokkup consists of two parts, the agent and the CLI tool:</p> <ul> <li>agent runs on the servers/nodes where you want to run your containers. It listens for incoming job requests and executes them.</li> <li>CLI is used to dispatch job requests to the servers/nodes.</li> </ul> <p>The CLI requires two files, the inventory and the job files:</p> <ul> <li>inventory contains information about your nodes, such as their agent's API key, URL and name.</li> <li>job contains the configuration for the containers you want to deploy, it closely resembles a standard docker-compose file.</li> </ul>"},{"location":"#where-do-i-start","title":"Where do I start?","text":"<p>You can start by reading Agent setup and CLI setup then reading through the Deploying jobs section.</p>"},{"location":"agent-setup/","title":"Agent setup","text":"<p>The agent runs on your server and will do all of the container management once it receives a request from the CLI tool.</p>"},{"location":"agent-setup/#deploy-the-agent","title":"Deploy the agent","text":"<p>Running the agent is as simple as running a simple docker command:</p> <pre><code>$ docker run -d --name dokkup-agent -p 8080:8080 \\ \n--restart always -v /path/to/config:/config \\ \n-v /var/run/docker.sock:/var/run/docker.sock xiovv/dokkup:latest\n</code></pre>"},{"location":"agent-setup/#retrieve-the-api-key","title":"Retrieve the API key","text":"<p>Note</p> <p>The API key will not be printed out the next time you run the agent.</p> <pre><code>$ docker logs dokkup-agent\n</code></pre> <pre><code>Your new API key is: jy9DbtDlfi5VJuAkbZYd4Kt0c2cQY8iQ\n2023-09-22T10:31:42.175+0200    INFO    agent/main.go:36        server is listening...  {\"port\": \"8080\"}\n</code></pre> <p>The agent is now ready to be used.</p>"},{"location":"cli-setup/","title":"CLI Setup","text":"<p>The CLI is used to execute jobs and to tell the agent what to do.</p>"},{"location":"cli-setup/#install","title":"Install","text":""},{"location":"cli-setup/#install-from-releases","title":"Install from Releases","text":"<p>Go to Releases and download the binary for your OS and CPU architecture.</p>"},{"location":"cli-setup/#install-from-source","title":"Install from source:","text":"<p>Clone the repository: <pre><code>$ git clone https://github.com/XiovV/dokkup.git\n</code></pre></p> <p>Install the binary: <pre><code>cd dokkup/cmd/dokkup\ngo install\n</code></pre></p> <p>Run <code>dokkup</code> in your terminal to verify it's installed: <pre><code>$ dokkup version\n</code></pre></p> <pre><code>Dokkup v0.1.0-beta, build fd13a57\n</code></pre>"},{"location":"deploying_jobs/deploy-job/","title":"Deploy a job","text":"<p>Before we can start deploying jobs, we need an inventory and a job file. Check out Inventory and Job specification to learn more about them.</p>"},{"location":"deploying_jobs/deploy-job/#inventory","title":"Inventory","text":"<p>The inventory contains information about our agents. The concept is very similar to Ansible's inventory file.</p> inventory.yaml<pre><code>nodes:\n - name: \"lab1\"\n   location: \"192.168.0.99:8080\"\n   key: \"Z6wC4goD7V2EiL4XuecTuo8jVxfvwVxs\"\n\n - name: \"lab2\"\n   location: \"192.168.0.100:8080\"\n   key: \"EcwxaMO3kyBaKETesxInx7ga3Ti93gvI\"\n\ngroups:\n - name: \"labs\"\n   nodes: [\"lab1\", \"lab2\"]\n</code></pre> <p>Here we've defined two nodes and assigned them to a group. This way we can refer to them with a group name instead of individually. </p> <p>Note that you do not have to use 2 or more nodes, you can use dokkup with a single node if you wish to do so.</p>"},{"location":"deploying_jobs/deploy-job/#job-specification","title":"Job specification","text":"<p>The job specification contains the configuration for the containers you want to deploy. It closely resembles a standard docker-compose file.</p> <p>Check out Job specification for a full example.</p> demo.yaml<pre><code>group: \"labs\"\ncount: 2\nname: \"demo\"\n\ncontainer:\n - image: \"crccheck/hello-world\"\n   ports:\n    - in: 8000\n   restart: always \n</code></pre> <p>Here we are telling dokkup:</p> <ul> <li>on which nodes we want the job to be deployed to.</li> <li>how many instances of the container we want to run per node (in our case this will total to 4 containers, as we are deploying 2 per node).</li> <li>to assign the job the name \"demo\". </li> <li>information about the container, such as the image, ports and restart policy. </li> </ul> <p>In this example we have ommited assigning an exposed port. It's recommended to do so when running more than one container (e.g. count is greater than 1) because each container needs to have its own unique exposed port. Docker will automatically assign exposed ports for each of our containers.</p>"},{"location":"deploying_jobs/deploy-job/#deploy-the-job","title":"Deploy the job","text":"<p>Now that we have our inventory and job specification, we can deploy our job:</p> <pre><code>$ dokkup run job -i inventory.yaml demo.yaml\n</code></pre> <pre><code>Deployment summary:\n\nNAME     IMAGE                    RESTART     COUNT     GROUP     NETWORK\ndemo     crccheck/hello-world     always      2         labs      bridge\n\nNode statuses:\n\nNAME      STATUS     CONTAINERS     UPDATE     VERSION\nlab1*     ONLINE     0 -&gt; 2         true       55dab35\nlab2*     ONLINE     0 -&gt; 2         true       55dab35\n\nAre you sure you want to proceed? (y/n)\n</code></pre> <ul> <li>Tip 1: If there's an <code>inventory.yaml</code> in your current directory, you can omit the -i flag, dokkup loads <code>inventory.yaml</code> files by default.</li> <li>Tip 2: You can provide a -y or --yes flag to skip the confirmation prompt.</li> </ul> <p>The CLI will show a deployment summary, showing some basic information about the job, such as how many containers it's going to run and the hashed version tag of the job, along with the nodes on which the job will be deployed. The asterisk next to the node name signifies that a job will be deployed from scratch.</p>"},{"location":"deploying_jobs/deploy-job/#show-the-containers","title":"Show the containers","text":"<p>Now we can run <code>docker ps</code> on our nodes and see our containers (this is for demonstration purposes, you don't have to do this): <pre><code>$ docker ps\n</code></pre></p> <p>lab1<pre><code>CONTAINER ID   IMAGE                  COMMAND                   CREATED          STATUS                             PORTS                                       NAMES\nadec3b3612ca   crccheck/hello-world   \"/bin/sh -c 'echo \\\"h\u2026\"   14 seconds ago   Up 12 seconds (health: starting)   0.0.0.0:32805-&gt;8000/tcp                     demo-b905568e-942a-4ef4-b091-45f9fc2ddea9\ne3a4b99761b1   crccheck/hello-world   \"/bin/sh -c 'echo \\\"h\u2026\"   14 seconds ago   Up 12 seconds (health: starting)   0.0.0.0:32804-&gt;8000/tcp                     demo-78d37fdd-cbfc-468c-88b3-b8a1df17855b\n23e0af35bdae   xiovv/dokkup:latest    \"/agent\"                  25 hours ago     Up 25 hours                        0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp   dokkup-agent\n</code></pre> lab2<pre><code>CONTAINER ID   IMAGE                  COMMAND                   CREATED          STATUS                    PORTS                                       NAMES\ncf00cd390db3   crccheck/hello-world   \"/bin/sh -c 'echo \\\"h\u2026\"   36 seconds ago   Up 34 seconds (healthy)   0.0.0.0:32793-&gt;8000/tcp                     demo-d71fc907-6b29-4287-aab8-d29a5fe4e821\n0e8e013adea2   crccheck/hello-world   \"/bin/sh -c 'echo \\\"h\u2026\"   37 seconds ago   Up 35 seconds (healthy)   0.0.0.0:32792-&gt;8000/tcp                     demo-4d2c8f50-48e7-4817-b380-4b790196d34f\n2386f86f788b   xiovv/dokkup:latest    \"/agent\"                  25 hours ago     Up 25 hours               0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp   dokkup-agent\n</code></pre></p> <p>Alternatively, you can use the <code>dokkup show job</code> command to see your containers: <pre><code>$ dokkup show job demo.yaml\n</code></pre> <pre><code>NODE     LOCATION              STATUS     JOB      IMAGE                    CONTAINERS     VERSION\nlab1     192.168.0.99:8080     ONLINE     demo     crccheck/hello-world     2/2            55dab35\n\nCONTAINER ID     NAME                                          STATUS                      PORTS\nadec3b3612ca     demo-b905568e-942a-4ef4-b091-45f9fc2ddea9     Up 12 seconds (healthy)     0.0.0.0:32805-&gt;8000/tcp\ne3a4b99761b1     demo-78d37fdd-cbfc-468c-88b3-b8a1df17855b     Up 12 seconds (healthy)     0.0.0.0:32804-&gt;8000/tcp\n\n\nNODE     LOCATION               STATUS    JOB      IMAGE                    CONTAINERS     VERSION\nlab2     192.168.0.100:8080     ONLINE    demo     crccheck/hello-world     2/2            55dab35\n\nCONTAINER ID     NAME                                          STATUS                      PORTS\ncf00cd390db3     demo-d71fc907-6b29-4287-aab8-d29a5fe4e821     Up 34 seconds (healthy)     0.0.0.0:32793-&gt;8000/tcp\n0e8e013adea2     demo-4d2c8f50-48e7-4817-b380-4b790196d34f     Up 35 seconds (healthy)     0.0.0.0:32792-&gt;8000/tcp\n</code></pre></p> <p>In case you run the dokkup run job command without making any changes, you don't have to worry about dokkup wiping your existing containers and re-deploying them again, it will detect that nothing has changed and it won't do anything: <pre><code>$ dokkup run job demo.yaml\n</code></pre> <pre><code>Deployment summary:\n\nNAME     IMAGE                    RESTART     COUNT     GROUP     NETWORK\ndemo     crccheck/hello-world     always      2         labs      bridge\n\nNode statuses:\n\nNAME     STATUS     CONTAINERS     UPDATE     VERSION\nlab1     ONLINE     2/2            false      55dab35\nlab2     ONLINE     2/2            false      55dab35\n\nAre you sure you want to proceed? (y/n) \n</code></pre></p> <p>The CLI will show how many containers are running and the update status (in our case it's going to be set to false as we haven't changed anything) which will signify whether the job is going to be updated or not.</p> <p>And that's it! You have successfully deployed 4 instances of a container spread accross 2 nodes. </p> <p>Read the Managing jobs section and Reverse Proxy &amp; Load Balancing with TLS using Traefik to learn more. </p>"},{"location":"deploying_jobs/inventory/","title":"Inventory","text":"<p>The inventory contains information about our agents. The concept is very similar to Ansible's inventory file.</p> inventory.yaml<pre><code>nodes:\n   # Custom name for a node. Can be set to any string. \n - name: \"lab1\"\n\n   # The IP and port where the agent is running.\n   location: \"192.168.0.99:8080\"\n\n   # The agent's API key\n   key: \"Z6wC4goD7V2EiL4XuecTuo8jVxfvwVxs\"\n\n - name: \"lab2\"\n   location: \"192.168.0.100:8080\"\n   key: \"EcwxaMO3kyBaKETesxInx7ga3Ti93gvI\"\n\ngroups:\n   # Custom name for a group. Can be set to any string.\n - name: \"labs\"\n\n   # List of nodes you want to put inside the group.\n   nodes: [\"lab1\", \"lab2\"]\n</code></pre>"},{"location":"deploying_jobs/job/","title":"Job","text":"<p>The job specification contains the configuration for the containers you want to deploy. It closely resembles a standard docker-compose file.</p> job.yaml<pre><code># The group where you want to deploy the job.\n#\n# Cannot be used if node OR nodes have been specified.\ngroup: \"labs\"\n\n# The node on which you want to deploy the job.\n#\n# Cannot be used if group OR nodes have been specified.\n# node: \"lab1\"\n\n# List of nodes on which you want to deploy the job.\n#\n# Cannot be used if group OR node have been specified.\n# nodes: [\"lab1\", \"lab2\"]\n\n# How many containers you want to run per node.\ncount: 2\n\n# Name of the job.\nname: \"demo\"\n\ncontainer:\n   # Docker image\n - image: \"traefik/whoami:latest\"\n\n   # Array of ports\n   ports:\n      # Port inside the container\n    - in: 8000\n      # Exposed port\n      #\n      # If omitted docker will dynamically assign the exposed port.\n      # Recommended to omit if running more than one instance of a container (e.g. count is greater than 1)\n    - out: 8080\n\n   # Restart policy\n   restart: always \n\n   # Array of labels\n   labels:\n     - \"my.label.test=demo\"\n\n   # Array of environment variables\n   environment:\n     - MYENV=ENVEXAMPLE\n\n   # Array of volumes\n   volumes:\n     - myvolume:/home\n\n   # Array of networks\n   #\n   # Default: bridge\n   networks:\n    - mynetwork\n\n   # Array of command flags\n   commands:\n    - \"--my-custom-flag\"\n</code></pre>"},{"location":"managing_jobs/canary_update/","title":"Canary update","text":"<p>This is work in progress.</p>"},{"location":"managing_jobs/remove/","title":"Remove/purge a job","text":"<p>If you wish to completely remove a job from your cluster of servers, you can do so with the <code>dokkup stop job --purge demo.yaml</code>:</p> <p>Warning</p> <p>The rollback command cannot undo a purge, so be careful when running this command. The only way to return the containers is by running a deployment from scratch.</p> <p><pre><code>$ dokkup stop job --purge demo.yaml\n</code></pre> <pre><code>Stop job summary:\n\nNAME     IMAGE                    GROUP\ndemo     crccheck/hello-world     labs\n\nNode statuses:\n\nNAME     STATUS     CONTAINERS     PURGE\nlab1     ONLINE     2 -&gt; 0         true\nlab2     ONLINE     2 -&gt; 0         true\n\nAre you sure you want to proceed? (y/n) \n</code></pre></p>"},{"location":"managing_jobs/rollback/","title":"Rollback a job","text":"<p>In case you want to rollback an update (for example: you notice a serious issue with your new containers and want to return to the previous state as soon as possible), you can do so with the <code>dokkup rollback job</code> command:</p> <p>Note</p> <p>If you've never done an update of a job before, the rollback field will be set to false, meaning that dokkup will not be able to do a rollback as there's no previous state to return to.</p> <p><pre><code>$ dokkup rollback job demo.yaml\n</code></pre> <pre><code>Deployment summary:\n\nNAME     IMAGE                    RESTART     COUNT     GROUP     NETWORK\ndemo     crccheck/hello-world     always      2         labs      bridge\n\nNode statuses:\n\nNAME     STATUS     CONTAINERS     ROLLBACK     VERSION\nlab1     ONLINE     2/2            true         9470cdc -&gt; 55dab35\nlab2     ONLINE     2/2            true         9470cdc -&gt; 55dab35\n\nAre you sure you want to proceed? (y/n) \n</code></pre></p>"},{"location":"managing_jobs/scaling/","title":"Scaling jobs","text":"<p>With dokkup's scaling feature, you can easily change the number of running containers on your nodes.</p> <p>Note</p> <p>Upscaling or downscaling a job will not have an effect on your uptime.</p>"},{"location":"managing_jobs/scaling/#upscale-a-job","title":"Upscale a job","text":"<p>If you want to increase the number of running containers, you can do so by incrasing the <code>count</code> field in your job specification, then run the <code>dokkup run job</code> command: </p> <p>demo.yaml<pre><code>group: \"labs\"\n# count: 2\ncount: 5\nname: \"demo\"\n\ncontainer:\n - image: \"crccheck/hello-world\"\n   ports:\n    - in: 8000\n   restart: always \n   labels:\n     - \"my.label.test=demo\"\n   environment:\n     - MYENV=ENVEXAMPLE\n   volumes:\n     - myvolume:/home\n</code></pre> <pre><code>$ dokkup run job demo.yaml\n</code></pre> <pre><code>Deployment summary:\n\nNAME     IMAGE                    RESTART     COUNT     GROUP     NETWORK\ntest     crccheck/hello-world     always      5         local     bridge\n\nNode statuses:\n\nNAME          STATUS     CONTAINERS     UPDATE     VERSION\nlab1          ONLINE     2 -&gt; 5         true       55dab32\nlab2          ONLINE     2 -&gt; 5         true       55dab32\n\nAre you sure you want to proceed? (y/n) \n</code></pre></p>"},{"location":"managing_jobs/scaling/#downscale-a-job","title":"Downscale a job","text":"<p>If you want to decrease the number of running containers, you can do so by decreasing the <code>count</code> field in your job specification, then run the <code>dokkup run job</code> command: </p> <p>demo.yaml<pre><code>group: \"labs\"\n# count: 5\ncount: 2\nname: \"demo\"\n\ncontainer:\n - image: \"crccheck/hello-world\"\n   ports:\n    - in: 8000\n   restart: always \n   labels:\n     - \"my.label.test=demo\"\n   environment:\n     - MYENV=ENVEXAMPLE\n   volumes:\n     - myvolume:/home\n</code></pre> <pre><code>$ dokkup run job demo.yaml\n</code></pre> <pre><code>Deployment summary:\n\nNAME     IMAGE                    RESTART     COUNT     GROUP     NETWORK\ntest     crccheck/hello-world     always      2         local     bridge\n\nNode statuses:\n\nNAME          STATUS     CONTAINERS     UPDATE     VERSION\nlab1          ONLINE     5 -&gt; 2         true       55dab32\nlab2          ONLINE     5 -&gt; 2         true       55dab32\n\nAre you sure you want to proceed? (y/n) \n</code></pre></p>"},{"location":"managing_jobs/show_status/","title":"Show job status","text":"<p>If you would like to get some information about a job, you can do so with the <code>dokkup show job</code> command:</p> <p><pre><code>$ dokkup show job demo.yaml\n</code></pre> <pre><code>NODE     LOCATION              STATUS     JOB      IMAGE                    CONTAINERS     VERSION\nlab1     192.168.0.99:8080     ONLINE     demo     crccheck/hello-world     2/2            9470cdc\n\nCONTAINER ID     NAME                                          STATUS                     PORTS\n99294b42a89d     demo-bbf84ca7-0a2b-4c65-9f39-f77fb8ce3624     Up 8 minutes (healthy)     0.0.0.0:32773-&gt;8000/tcp\n28de75e833c0     demo-a9e8525a-103a-4749-b441-df676976b62d     Up 8 minutes (healthy)     0.0.0.0:32772-&gt;8000/tcp\n\n\nNODE     LOCATION               STATUS    JOB      IMAGE                    CONTAINERS     VERSION\nlab2     192.168.0.100:8080     ONLINE    demo     crccheck/hello-world     2/2            9470cdc\n\nCONTAINER ID     NAME                                          STATUS                     PORTS\ndc5fd3c210ed     demo-53fec61f-3eb6-4666-86d4-1d96b22d1291     Up 8 minutes (healthy)     0.0.0.0:32773-&gt;8000/tcp\n9d51076ddd5a     demo-28949bc3-fc57-46b0-8c36-86b06d8a2228     Up 8 minutes (healthy)     0.0.0.0:32772-&gt;8000/tcp\n</code></pre></p>"},{"location":"managing_jobs/stop/","title":"Stop a job","text":"<p>Warning</p> <p>Stopping a job will NOT remove the containers, it will simply stop them. If you'd like to remove the containers, read Remove/purge.</p> <p>If you wish to stop a job, you can do so with the <code>dokkup stop job</code> command: <pre><code>$ dokkup stop job demo.yaml\n</code></pre> <pre><code>Stop job summary:\n\nNAME     IMAGE                    GROUP\ndemo     crccheck/hello-world     labs\n\nNode statuses:\n\nNAME     STATUS     CONTAINERS     PURGE\nlab1     ONLINE     2 -&gt; 0         false\nlab2     ONLINE     2 -&gt; 0         false\n\nAre you sure you want to proceed? (y/n) \n</code></pre></p> <p>Note</p> <p>After stopping a job, you can easily start it back up again with the <code>dokkup run job</code> command.</p>"},{"location":"managing_jobs/update/","title":"Update a job","text":"<p>Updating a job is as simple as making a change in the job specification file and running the <code>dokkup run job</code> command again: </p> demo.yaml<pre><code>group: \"labs\"\ncount: 2\nname: \"demo\"\n\ncontainer:\n - image: \"crccheck/hello-world\"\n   ports:\n    - in: 8000\n   restart: always \n   labels:\n   # - \"my.label.test=demo\"\n     - \"my.label.test=somechange\"\n   environment:\n     - MYENV=ENVEXAMPLE\n   volumes:\n     - myvolume:/home\n</code></pre> <p>Note</p> <p>Dokkup will execute the update with zero downtime.</p> <p>In the event that something goes wrong during the update, dokkup will abort and return the previous containers, ensuring minimum downtime in the event of an error.</p> <pre><code>$ dokkup run job demo.yaml\n</code></pre> <pre><code>Deployment summary:\n\nNAME     IMAGE                    RESTART     COUNT     GROUP     NETWORK\ndemo     crccheck/hello-world     always      2         labs      bridge\n\nNode statuses:\n\nNAME     STATUS     CONTAINERS     UPDATE     VERSION\nlab1     ONLINE     2/2            true       55dab35 -&gt; 9470cdc\nlab2     ONLINE     2/2            true       55dab35 -&gt; 9470cdc\n\nAre you sure you want to proceed? (y/n) \n</code></pre> <p>The update status is now true, meaning that dokkup is going to take down the currently running containers and deploy new ones. The new version hash is also shown. </p>"}]}