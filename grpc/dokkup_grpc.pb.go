// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UpdaterClient is the client API for Updater service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpdaterClient interface {
	UpdateContainer(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (Updater_UpdateContainerClient, error)
}

type updaterClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdaterClient(cc grpc.ClientConnInterface) UpdaterClient {
	return &updaterClient{cc}
}

func (c *updaterClient) UpdateContainer(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (Updater_UpdateContainerClient, error) {
	stream, err := c.cc.NewStream(ctx, &Updater_ServiceDesc.Streams[0], "/Updater/UpdateContainer", opts...)
	if err != nil {
		return nil, err
	}
	x := &updaterUpdateContainerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Updater_UpdateContainerClient interface {
	Recv() (*UpdateResponse, error)
	grpc.ClientStream
}

type updaterUpdateContainerClient struct {
	grpc.ClientStream
}

func (x *updaterUpdateContainerClient) Recv() (*UpdateResponse, error) {
	m := new(UpdateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UpdaterServer is the server API for Updater service.
// All implementations must embed UnimplementedUpdaterServer
// for forward compatibility
type UpdaterServer interface {
	UpdateContainer(*UpdateRequest, Updater_UpdateContainerServer) error
	mustEmbedUnimplementedUpdaterServer()
}

// UnimplementedUpdaterServer must be embedded to have forward compatible implementations.
type UnimplementedUpdaterServer struct {
}

func (UnimplementedUpdaterServer) UpdateContainer(*UpdateRequest, Updater_UpdateContainerServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateContainer not implemented")
}
func (UnimplementedUpdaterServer) mustEmbedUnimplementedUpdaterServer() {}

// UnsafeUpdaterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpdaterServer will
// result in compilation errors.
type UnsafeUpdaterServer interface {
	mustEmbedUnimplementedUpdaterServer()
}

func RegisterUpdaterServer(s grpc.ServiceRegistrar, srv UpdaterServer) {
	s.RegisterService(&Updater_ServiceDesc, srv)
}

func _Updater_UpdateContainer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdaterServer).UpdateContainer(m, &updaterUpdateContainerServer{stream})
}

type Updater_UpdateContainerServer interface {
	Send(*UpdateResponse) error
	grpc.ServerStream
}

type updaterUpdateContainerServer struct {
	grpc.ServerStream
}

func (x *updaterUpdateContainerServer) Send(m *UpdateResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Updater_ServiceDesc is the grpc.ServiceDesc for Updater service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Updater_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Updater",
	HandlerType: (*UpdaterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateContainer",
			Handler:       _Updater_UpdateContainer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/dokkup.proto",
}
